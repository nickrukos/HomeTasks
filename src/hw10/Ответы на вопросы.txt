  interface Eatable extends Serializable{}
  interface Runnable {}

  class Animal implements Runnable{}

  class Cat extends Animal implements Eatable{}
  class Kitten extends Cat{}

  class Dog extends Animal implements Serializable{}


  class Task {
     public static  <T extends Cat & Eatable> void void01(T object){
         // ВОПРОС: методы каких типов можно вызвать у object ???
         Serializable
         Eatable
         Runnable
         Animal
         Cat
     }

     public static  <T extends Animal & Serializable> void void02(T object){
        // ВОПРОС: методы каких типов можно вызвать у object ???
        Serializable
        Runnable
        Animal
     }

     public static  <T extends Serializable & Runnable> void void03(T object){
        // ВОПРОС: методы каких типов можно вызвать у object ???
        Runnable
        Serializable
     }

     public static void main(String[] args) {
        Task.</* ВОПРОС: какие типы можно указать ??? */>void01(/* ВОПРОС: какие типы можно передать ??? */);
        Eatable
        Animal
        Cat
        Dog
        Kitten
        Для возвращаемого значения и параметра используется тот же самый набор типов

        Task.</* ВОПРОС: какие типы можно указать ??? */>void02(/* ВОПРОС: какие типы можно передать ??? */);
        Serializable
        Eatable
        Animal
        Сat
        Dog
        Kitten
        Для возвращаемого значения и параметра используется тот же самый набор типов

        Task.<Dog>void03(/* ВОПРОС: какие типы можно передать ??? */);
        Serializable
        Runnable
        Eatable
        Animal
        Сat
        Dog
        Kitten
     }

}